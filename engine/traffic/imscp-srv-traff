#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by Laurent Declercq <l.declercq@nuxwin.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../PerlLib";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Execute;
use iMSCP::Database;
use iMSCP::Getopt;
use File::Basename;

$ENV{'LANG'} = 'C.UTF-8';

newDebug('imscp-srv-traff.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {

Script which collects i-MSCP server' traffic data.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-srv-traff.lock', 'nowait');
$bootstrapper->boot({ 'norequirements' => 'yes', 'nolock' => 'yes', 'config_readonly' => 'yes' });

sub run
{
	my ($inputTraffic, $outputTraffic, $stdout, $stderr);
	my %hash = ('IMSCP_INPUT' => \$inputTraffic, 'IMSCP_OUTPUT' => \$outputTraffic);

	# Getting input and output traffic data
	while(my ($src, $target) = each %hash) {
		my $rs = execute("iptables -nvxL $src", $target, \$stderr);
		debug($$target) if $$target;
  		error($stderr) if $stderr && $rs;
		return $rs if $rs;
	}

	# Parse input traffic data
	my ($smtpIn, $poIn, $httpIn, $allIn) = _parseTrafficData($inputTraffic);

	# Parse output traffic data
	my ($smtpOut, $poOut, $httpOut, $allOut) = _parseTrafficData($outputTraffic);

	# Update traffic data in database

	# Floor down for the last half'n hour to make timestamps in server_traffic and domain_traffic identical
	my $timestamp = time;
	$timestamp -= ($timestamp % 1800);

	my $qrs = iMSCP::Database->factory()->doQuery(
		'dummy',
		'
			INSERT INTO server_traffic (
				traff_time, bytes_in, bytes_out, bytes_mail_in, bytes_mail_out, bytes_pop_in, bytes_pop_out,
				bytes_web_in, bytes_web_out
			) VALUES (
				?, ?, ?, ?, ?, ?, ?, ?, ?
			)
		',
		$timestamp, $allIn, $allOut, $smtpIn, $smtpOut, $poIn, $poOut, $httpIn, $httpOut
	);
	unless(ref $qrs eq 'HASH') {
		error($qrs);
		return 1;
	}

	# Reset traffic data for next run

	for(keys %hash) {
		my $rs = execute("iptables -Z $_", \$stdout, \$stderr);
		debug($stdout) if $stdout;
		error($stderr) if $stderr && $rs;
		return $rs if $rs;
	}

	0;
}

sub _parseTrafficData($)
{
	my $data = shift;

	my ($smtp, $po, $http, $all) = (0, 0, 0, 0);

	if($data) {
		while($data =~ /^\s+\d+\s+(\d+).*?(?:(?:dpt|spt):(\d+))?$/gm) {
			my ($bytes, $port) = ($1, $2 // 0);

			if($port > 0) {
				$smtp += $bytes if $port == 587 || $port == 25 || $port == 465;
				$po += $bytes if $port == 110 || $port == 995 || $port == 143 || $port == 993;
				$http += $bytes if $port == 80 || $port == 443;
			} else {
				$all = $bytes;
			}
		}
	}

	($smtp, $po, $http, $all);
}

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-srv-traff.lock');
exit $rs;
